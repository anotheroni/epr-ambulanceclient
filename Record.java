import java.io.*;
import java.sql.*;
import java.util.Date;

/**
 * Record is an aggragate object that contains 
 * the underlaying Ambulance packet objects that will be send to the server
 *
 * @author Kane Neman
 * @version 20030904
 */  
public class Record implements Serializable {

    private AmbulanceRecordPacket arp;
    private AmbulancePatientPacket app;
    private AmbulanceMedicinePacket amp;
    private AmbulanceMatasPacket matas;
    private AmbulanceExaminationPacket aep;
    private AmbulanceStatisticsPacket asp;
    private AmbulanceActionPacket aap;
    private AmbulanceParameterPacket aParp;
    
    private int clientRecordId;
    private int serverRecordId;
    private boolean isRecordSigned;
    private long twoHours = 10 * 60 * 1000; //2 * 3600 * 1000;
    private Timestamp autoSignTime;
    private boolean lastPacket = false;

    /**
     * Constroctor used by server to re-initialize this object upon receive
     */
    public Record() {}


    /**
     * Constructor used by ambulance client to create a Record object
     * @param recordId The patient record that will be send to the server
     * @param db2 client database connection 
     */
    public Record(int recordId, DB2Connect db2) throws SQLException {

        this.clientRecordId = recordId;
        arp = new AmbulanceRecordPacket(clientRecordId, db2);
        app = new AmbulancePatientPacket(clientRecordId, db2);
        amp = new AmbulanceMedicinePacket(clientRecordId, db2);
        matas = new AmbulanceMatasPacket(clientRecordId, db2);
        aep = new AmbulanceExaminationPacket(clientRecordId, db2);
        asp = new AmbulanceStatisticsPacket(clientRecordId, db2);
        aap = new AmbulanceActionPacket(clientRecordId, db2);
        aParp = new AmbulanceParameterPacket(clientRecordId, db2);
    }

    /**
     * Method used by the server to write the received patient record
     * to the server database
     * @param db2 is the database connection at the server
     */ 
    public void writeRecordPacket(DB2Connect db2) throws SQLException {

        Date date;
        long scheduleTime;
        String query;

        serverRecordId = arp.writeRecordPacket(db2);
        isRecordSigned = arp.doesSignTimeExist();

        if(arp.doesRecordExist())
            return;

        if(!isRecordSigned) {
            //get the current time and date
            date = new Date();

            //move the time two hours forward
            scheduleTime = date.getTime() + twoHours;

            //create a timestamp
            autoSignTime= new Timestamp(scheduleTime);

            //insert the sign information into the database
            query  = "INSERT INTO EPR.AUTO_SIGN (RECORD_ID, INSERT_TIME, " +
                "SCHEDULED_SIGN_TIME) VALUES (" + serverRecordId + 
                ", CURRENT TIMESTAMP, '" + autoSignTime + "')";

            db2.dbQueryUpdate (query);
        }

        app.writePatientPacket(db2, serverRecordId);
        amp.writeMedicinePacket(db2, serverRecordId);
        matas.writeMatasPacket(db2, serverRecordId);
        aep.writeExaminationPacket(db2, serverRecordId);
        asp.writeStatisticPacket(db2, serverRecordId);
        aap.writeActionPacket(db2, serverRecordId);
        //System.out.println("writeActionPacket pass");
        aParp.writeParameterPacket(db2, serverRecordId);
        //System.out.println("writeParameterPacket pass");
    }

    /**
     * Method used to get the record id generated by ambulance client 
     * @return Ambulance client record id
     */
    public int getClientRecordId() {
        return clientRecordId;
    }

    /**
     * Method used to get the record id generated by server
     * @return Server record id
     */ 
    public int getServerRecordId() {
        return serverRecordId;
    }

    /**
     * Method used to indicate if a patient record is signed
     * @return true if the record is signed otherwise false
     */ 
    public boolean isRecordSigned() {
        return isRecordSigned;
    }

    /**
     * Method used to get the auto sign time if the record is not signed
     * @return The time when the record will be signed
     */ 
    public Timestamp getAutoSignTime() {
        return autoSignTime;
    }

    /**
     * Method used to set the lastPacket flag
     */ 
    public void setLastPacket() {
        lastPacket = true;
    }

    public boolean isLastPacket() {
        return lastPacket;
    }
}
